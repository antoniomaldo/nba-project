Points = as.numeric(playerData$X.[playerData$row.names == "points"]),
Ceil = as.numeric(playerData$X.[playerData$row.names == "ceil"]),
Floor = as.numeric(playerData$X.[playerData$row.names == "floor"]))
)
View(playerData)
trimws(as.character(playerData$X.[playerData$row.names == "player_name"]))
as.numeric(trimws(as.character(playerData$X.[playerData$row.names == "salary"]))
)
trimws(as.character(playerData$X.[playerData$row.names == "team"]))
trimws(as.character(playerData$X.[playerData$row.names == "position"]))
trimws(as.character(playerData$X.[playerData$row.names == "opp"]))
trimws(as.character(playerData$X.[playerData$row.names == "home?"]))
as.numeric(playerData$X.[playerData$row.names == "pmin"])
as.numeric(playerData$X.[playerData$row.names == "points"])
as.numeric(playerData$X.[playerData$row.names == "ceil"])
trimws(as.character(playerData$X.[playerData$row.names == "position"]))
getPosition <- function(x){
allowPos <- c("SG", "PG", "SF", "PF", "C")
x <- x[x %in% allowPos]
return(x[1])
}
trimws(getPosition(as.character(playerData$X.[playerData$row.names == "position"])))
as.numeric(trimws(as.character(playerData$X.[playerData$row.names == "salary"])))
trimws(as.character(playerData$X.[playerData$row.names == "opp"]))
trimws(as.character(playerData$X.[playerData$row.names == "home?"]))
View(dayData)
i=2
playerData <- subset(dayData, dayData$playerId == i)
formatData <- data.frame()
for(i in unique(dayData$playerId)){
playerData <- subset(dayData, dayData$playerId == i)
if(nrow(playerData) > 9){
formatData <- rbind(formatData, data.frame(
Name = trimws(as.character(playerData$X.[playerData$row.names == "player_name"])),
Salary = as.numeric(trimws(as.character(playerData$X.[playerData$row.names == "salary"])))[1],
Team = trimws(as.character(playerData$X.[playerData$row.names == "team"])),
Position = trimws(getPosition(as.character(playerData$X.[playerData$row.names == "position"]))),
Opp = trimws(as.character(playerData$X.[playerData$row.names == "opp"])),
IsHome = trimws(as.character(playerData$X.[playerData$row.names == "home?"])),
PMIN = as.numeric(playerData$X.[playerData$row.names == "pmin"]),
Points = as.numeric(playerData$X.[playerData$row.names == "points"]),
Ceil = as.numeric(playerData$X.[playerData$row.names == "ceil"]),
Floor = as.numeric(playerData$X.[playerData$row.names == "floor"]))
)
}
}
View(formatData)
View(dayData)
i = 22
playerData <- subset(dayData, dayData$playerId == i)
playerData
i=23
playerData <- subset(dayData, dayData$playerId == i)
playerData <- subset(dayData, dayData$playerId == 24)
playerData <- subset(dayData, dayData$playerId == 25)
trimws(as.character(playerData$X.[playerData$row.names == "player_name"]))
View(playerData)
playerData$X.[playerData$row.names == "player_name"])
playerData$X.[playerData$row.names == "player_name"]
length(playerData$X.[playerData$row.names == "player_name"])
formatData <- data.frame()
for(i in unique(dayData$playerId)){
playerData <- subset(dayData, dayData$playerId == i)
if(nrow(playerData) > 9){
name = playerData$X.[playerData$row.names == "player_name"]
if(length(name) > 0){
formatData <- rbind(formatData, data.frame(
Name = trimws(as.character(playerData$X.[playerData$row.names == "player_name"])),
Salary = as.numeric(trimws(as.character(playerData$X.[playerData$row.names == "salary"])))[1],
Team = trimws(as.character(playerData$X.[playerData$row.names == "team"])),
Position = trimws(getPosition(as.character(playerData$X.[playerData$row.names == "position"]))),
Opp = trimws(as.character(playerData$X.[playerData$row.names == "opp"])),
IsHome = trimws(as.character(playerData$X.[playerData$row.names == "home?"])),
PMIN = as.numeric(playerData$X.[playerData$row.names == "pmin"]),
Points = as.numeric(playerData$X.[playerData$row.names == "points"]),
Ceil = as.numeric(playerData$X.[playerData$row.names == "ceil"]),
Floor = as.numeric(playerData$X.[playerData$row.names == "floor"]))
)
}
}
}
View(formatData)
playerData$X.[playerData$row.names == "team"]
View(playerData)
i = 1
playerData <- subset(dayData, dayData$playerId == i)
playerData
playerData$X.[playerData$row.names == "team"]
trimws(as.character(playerData$X.[playerData$row.names == "team"]))
playerData$X.[playerData$row.names == "team"]
formatData <- data.frame()
for(i in unique(dayData$playerId)){
playerData <- subset(dayData, dayData$playerId == i)
if(nrow(playerData) > 9){
name = playerData$X.[playerData$row.names == "player_name"]
if(length(name) > 0){
team = playerData$X.[playerData$row.names == "team"]
team = team[team != "null"]
formatData <- rbind(formatData, data.frame(
Name = trimws(as.character(name)),
Salary = as.numeric(trimws(as.character(playerData$X.[playerData$row.names == "salary"])))[1],
Team = trimws(as.character(team)),
Position = trimws(getPosition(as.character(playerData$X.[playerData$row.names == "position"]))),
Opp = trimws(as.character(playerData$X.[playerData$row.names == "opp"])),
IsHome = trimws(as.character(playerData$X.[playerData$row.names == "home?"])),
PMIN = as.numeric(playerData$X.[playerData$row.names == "pmin"]),
Points = as.numeric(playerData$X.[playerData$row.names == "points"]),
Ceil = as.numeric(playerData$X.[playerData$row.names == "ceil"]),
Floor = as.numeric(playerData$X.[playerData$row.names == "floor"]))
)
}
}
}
View(formatData)
FD_CSV_DIR <- "C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\build java data\\fd-data.csv"
FD_CSV_DIR <- "C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\build java data\\fd-data.csv"
file.exists(FD_CSV_DIR)
library(stringr)
source("C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\build java data\\Build players data.R")
FD_CSV_DIR <- "C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\build java data\\fd-data.csv"
if(!file.exists(FD_CSV_DIR)){
source("C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\build java data\\1.Read rotogrinders data.R")
source("C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\build java data\\2. Format todays fd data.R")
}
allPlayers <- readRDS(file = "C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\build java data\\data\\allPlayers.rds")
ALL_DATA_RDS_DIR <- "C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\build java data\\data\\allPlayers.rds"
file.exists(ALL_DATA_RDS_DIR)
if(file.exists(ALL_DATA_RDS_DIR)){
allPlayers <- readRDS(file = "C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\build java data\\data\\allPlayers.rds")
}else{
allPlayers <- getPlayersData()
}
fdData <- read.csv("C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\build java data\\fd-data.csv")
fdData <- read.csv("C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\build java data\\data\\fd-data.csv")
View(fdData)
fdData$O.U <- NA
fdData$Total <- NA
mappings <- unique(read.csv("C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\Roto data\\MAPPINGS_ROTO.csv")[c(1,3)])
strangeChar <- substr(mappings$rotoName[106],start = 6,stop = 6)
mappings$Name <- str_replace_all(as.character(mappings$rotoName), strangeChar, " ")
mappings <- unique(mappings[c("PlayerId", "Name")])
fdData <- merge(fdData, mappings, by = "Name", all.x = T)
allPlayers <- allPlayers[c("PlayerId", "averageMinutes", "cumPercAttemptedPerMinute", "lastGameAttemptedPerMin",
"lastYeartwoPerc", "cumTwoPerc", "lastYearThreePerc", "cumThreePerc",
"lastYearThreeProp", "cumThreeProp", "cumFtMadePerFgAttempted",
"lastYearFtPerc", "cumFtPerc")]
fdData <- merge(fdData, allPlayers, by = "PlayerId", all.x = T)
View(fdData)
class(fdData$Name)
write.csv(fdData, "C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\build java data\\data\\javaData.csv")
library(stringr)
source("C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\build java data\\Build players data.R")
TODAY_DIR = paste0("C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\build java data\\data\\", Sys.Date())
FD_CSV_DIR <- paste0(TODAY_DIR, "\\fd-data.csv")
ALL_DATA_RDS_DIR <- paste0(TODAY_DIR, "\\allPlayers.rds")
SHOULD_UPDATE_ROTO_DATA <- T
if(!file.exists(FD_CSV_DIR) | SHOULD_UPDATE_ROTO_DATA){
source("C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\build java data\\1.Read rotogrinders data.R")
source("C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\build java data\\2. Format todays fd data.R")
}
if(file.exists(ALL_DATA_RDS_DIR)){
allPlayers <- readRDS(file = ALL_DATA_RDS_DIR)
if(max(as.Date(as.character(allPlayers$Date), "%Y%m%d")) != Sys.Date() - 1){
allPlayers <- getPlayersData()
}
}else{
allPlayers <- getPlayersData()
}
fdData <- read.csv(FD_CSV_DIR)
View(fdData)
FD_CSV_DIR
View(fdData)
fdData$O.U <- NA
fdData$Total <- NA
mappings <- unique(read.csv("C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\Roto data\\MAPPINGS_ROTO.csv")[c(1,3)])
strangeChar <- substr(mappings$rotoName[106],start = 6,stop = 6)
mappings$Name <- str_replace_all(as.character(mappings$rotoName), strangeChar, " ")
mappings <- unique(mappings[c("PlayerId", "Name")])
View(mappings)
fdData <- merge(fdData, mappings, by = "Name", all.x = T)
allPlayers <- allPlayers[c("PlayerId", "averageMinutes", "cumPercAttemptedPerMinute", "lastGameAttemptedPerMin",
"lastYeartwoPerc", "cumTwoPerc", "lastYearThreePerc", "cumThreePerc",
"lastYearThreeProp", "cumThreeProp", "cumFtMadePerFgAttempted",
"lastYearFtPerc", "cumFtPerc")]
fdData <- merge(fdData, allPlayers, by = "PlayerId", all.x = T)
fdData$timestamp <- as.numeric(Sys.time())
write.csv(fdData, paste0(TODAY_DIR, "\\javaData.csv"))
library(stringr)
library(jsonlite)
library(stringr)
source("C:\\Users\\Antonio\\Documents\\NBA\\api\\2. Read rotogrinders data.R")
source("C:\\Users\\Antonio\\Documents\\NBA\\api\\3. Format rotogrinders data.R")
PLAYER_DIR = paste0("C:\\Users\\Antonio\\Documents\\NBA\\api\\data\\", Sys.Date(), "\\players.csv")
BASE_DIR <- paste0("C:/Users/Antonio/Documents/NBA/api/data/", Sys.Date())
files <- list.files(BASE_DIR, full.names = T)
library(sqldf)
library(arm)
library(stringr)
source("C:\\Users\\Antonio\\Documents\\NBA\\player-model\\build java data\\Utils.R")
TODAY_DIR = paste0("C:\\Users\\Antonio\\Documents\\NBA\\player-model\\build java data\\data\\", Sys.Date())
#Players that played in 2019 but not in 2020
createMissingPlayers <- function(naPlayers){
lastGameLastYear <- aggregate(gamesPlayedSeason ~ PlayerId, naPlayers, max)
colnames(lastGameLastYear) <- c("PlayerId", "lastYearLastGame")
naPlayers <- merge(naPlayers, lastGameLastYear, by = "PlayerId", all.x = T)
naPlayers <- subset(naPlayers, naPlayers$gamesPlayedSeason == naPlayers$lastYearLastGame)
naPlayers$lastYeartwoPerc <- naPlayers$cumTwoPerc
naPlayers$lastYearThreePerc <- naPlayers$cumThreePerc
naPlayers$lastYearThreeProp <- naPlayers$cumThreeProp
naPlayers$lastYearFtPerc <- naPlayers$cumFtPerc
naPlayers$cumPercAttemptedPerMinute <- NA
naPlayers$lastGameAttemptedPerMin <- NA
naPlayers$cumTwoPerc <- NA
naPlayers$cumThreePerc <- NA
naPlayers$cumThreeProp <- NA
naPlayers$cumFtPerc <- NA
return(naPlayers[,1:(ncol(naPlayers) - 1)])
}
allPlayers <- getPlayersForYear(2021)
allPlayers <- subset(allPlayers, !allPlayers$Team %in% c("LEB", "GIA", "USA", "WORLD"))
allPlayers <- allPlayers[order(allPlayers$PlayerId, allPlayers$seasonYear),]
allPlayers$gamesPlayedSeason <-  unlist(aggregate(Min ~ seasonYear + PlayerId, allPlayers, function(x) {1:length(x)})$Min)
#Add odds data
baseDir = "C:\\Users\\aostios\\Documents\\Basketball Model\\NBA Model\\Players New\\"
oddsFiles = list.files(paste0(baseDir, "nba-odds/2017/") ,full.names = T)
allPlayers <- getPlayersForYear(2021)
allPlayers <- subset(allPlayers, !allPlayers$Team %in% c("LEB", "GIA", "USA", "WORLD"))
allPlayers <- allPlayers[order(allPlayers$PlayerId),]
allPlayers$cumThreeAttempted <- unlist(aggregate(Three.Attempted ~ PlayerId, allPlayers, function(x) {cumsum(x)})$Three.Attempted)
allPlayers$cumFgAttempted <- unlist(aggregate(Fg.Attempted ~ PlayerId, allPlayers, function(x) {cumsum(x)})$Fg.Attempted)
allPlayers$cumFTAttempted <- unlist(aggregate(FT.Attempted ~ PlayerId, allPlayers, function(x) {cumsum(x)})$FT.Attempted)
allPlayers$cumThreeMade <- unlist(aggregate(Three.Made ~ PlayerId, allPlayers, function(x) {cumsum(x)})$Three.Made)
allPlayers$cumFgMade <- unlist(aggregate(Fg.Made ~ PlayerId, allPlayers, function(x) {cumsum(x)})$Fg.Made)
allPlayers$cumFTMade <- unlist(aggregate(FT.Made ~ PlayerId, allPlayers, function(x) {cumsum(x)})$FT.Made)
allPlayers$cumRebounds <- unlist(aggregate(Total.Rebounds ~ PlayerId, allPlayers, function(x) {cumsum(x)})$Total.Rebounds)
allPlayers$cumAssists <- unlist(aggregate(Assists ~ PlayerId, allPlayers, function(x) {cumsum(x)})$Assists)
allPlayers$cumSteals <- unlist(aggregate(Steals ~ PlayerId, allPlayers, function(x) {cumsum(x)})$Steals)
allPlayers$cumBlocks <- unlist(aggregate(Blocks ~ PlayerId, allPlayers, function(x) {cumsum(x)})$Blocks)
allPlayers$cumTurnovers <- unlist(aggregate(Turnovers ~ PlayerId, allPlayers, function(x) {cumsum(x)})$Turnovers)
allPlayers$cumMin <- unlist(aggregate(Min ~ PlayerId, allPlayers, function(x) {cumsum(x)})$Min)
#Last season averages
lastYear <- getPlayersForYear(2020)
colnames(lastYear) <- str_replace(colnames(lastYear),pattern = "\\.","_")
agg <- sqldf("SELECT seasonYear, PlayerId, Name,
SUM(Min) AS LastYearMin,
SUM(Three_Made) AS LastYearThreeMade, SUM(Three_Attempted) AS LastYearThreeAttempted,
SUM(Fg_Made) AS LastYearFgMade, SUM(Fg_Attempted) AS LastYearFgAttempted,
SUM(FT_Made) AS LastYearFtMade, SUM(FT_Attempted) AS LastYearFTAttempted,
SUM(Total_Rebounds) AS LastYearRebounds,
SUM(Assists) AS LastYearAssists,
SUM(Steals) AS LastYearSteals,
SUM(Blocks) AS LastYearBlocks,
SUM(Turnovers) AS LastYearTurnovers
FROM lastYear
GROUP BY seasonYear, PlayerId")
agg$seasonYear <- agg$seasonYear + 1
allPlayers <- merge(allPlayers, agg,  all.x = T)
#Team totals
boxscores <- allPlayers
colnames(boxscores) <- str_replace_all(colnames(boxscores), "\\.", "_")
gameStats <- sqldf("SELECT seasonYear, GameId, Team,
SUM(Min) AS Min,
SUM(Points) AS Points,
SUM(Three_Made) AS Three_Made, SUM(Three_Attempted) AS Three_Attempted,
SUM(Fg_Made) AS Fg_Made, SUM(Fg_Attempted) AS Fg_Attempted,
SUM(FT_Made) AS FT_Made, SUM(FT_Attempted) AS FT_Attempted,
SUM(Offensive_Rebound) AS Offensive_Rebound,
SUM(Defensive_Rebound) AS Defensive_Rebound,
SUM(Total_Rebounds) AS Total_Rebounds,
SUM(Assists) AS Assists,
SUM(Steals) AS Steals,
SUM(Blocks) AS Blocks,
SUM(Turnovers) AS Turnovers,
SUM(Personal_Fouls) AS Personal_Fouls
FROM boxscores
GROUP BY seasonYear, GameId, Team")
rm(boxscores)
gameStats <- sqldf("SELECT t1.*, t2.Steals as oppSteals, t2.Blocks AS oppBlocks, t2.Personal_Fouls as oppPersonalFouls
FROM gameStats t1
LEFT JOIN gameStats t2 on t1.GameId = t2.GameId AND t1.Team != t2.Team
")
allPlayers <- sqldf("SELECT t1.*, t2.Fg_Attempted as teamTotalAttempted
FROM allPlayers t1
LEFT JOIN gameStats t2 ON t1.GameId = t2.GameId AND t1.Team = t2.Team")
allPlayers$percAttempted <- allPlayers$Fg.Attempted / allPlayers$teamTotalAttempted
allPlayers$percAttemptedPerMin <- allPlayers$percAttempted / allPlayers$Min
allPlayers <- allPlayers[order(allPlayers$PlayerId, allPlayers$seasonYear, allPlayers$GameId),]
allPlayers$teamAttempted <-  unlist(aggregate(teamTotalAttempted ~ PlayerId, allPlayers, function(x) {cumsum(x)})$teamTotalAttempted)
allPlayers$cumPercAttempted <- allPlayers$cumFgAttempted / allPlayers$teamAttempted
allPlayers$gamesPlayedSeason <-  unlist(aggregate(Min ~ PlayerId, allPlayers, function(x) {1:length(x)})$Min)
allPlayers$averageMinutes <- allPlayers$cumMin / allPlayers$gamesPlayedSeason
allPlayers$cumPercAttemptedPerMinute <- allPlayers$cumPercAttempted / allPlayers$averageMinutes
allPlayers$lastGameAttempted <- unlist(aggregate(percAttempted ~ PlayerId, allPlayers, function(x) {(x)})$percAttempted)
allPlayers$lastGameMin <- unlist(aggregate(Min ~ PlayerId, allPlayers, function(x) {(x)})$Min)
allPlayers$lastGameAttemptedPerMin <- allPlayers$lastGameAttempted / allPlayers$lastGameMin
allPlayers$cumThreePerc <- allPlayers$cumThreeMade / allPlayers$cumThreeAttempted
allPlayers$threePerc <-  allPlayers$Three.Made / allPlayers$Three.Attempted
allPlayers$lastYearThreePerc <-  allPlayers$LastYearThreeMade /  allPlayers$LastYearThreeAttempted
allPlayers$cumTwoPerc <- (allPlayers$cumFgMade - allPlayers$cumThreeMade) / (allPlayers$cumFgAttempted - allPlayers$cumThreeAttempted)
allPlayers$twoPerc <- (allPlayers$Fg.Made - allPlayers$Three.Made) / (allPlayers$Fg.Attempted - allPlayers$Three.Attempted)
allPlayers$lastYeartwoPerc <- (allPlayers$LastYearFgMade - allPlayers$LastYearThreeMade) / (allPlayers$LastYearFgAttempted - allPlayers$LastYearThreeAttempted)
allPlayers$lastYearThreeProp <- allPlayers$LastYearThreeAttempted / allPlayers$LastYearFgAttempted
allPlayers$cumThreeProp <- allPlayers$cumThreeAttempted / allPlayers$cumFgAttempted
allPlayers$lastYearThreeAttemptedPerMin <- allPlayers$LastYearThreeAttempted / allPlayers$LastYearMin
allPlayers$lastYearTwoAttemptedPerMin <- (allPlayers$LastYearFgAttempted - allPlayers$LastYearThreeAttempted) / allPlayers$LastYearMin
allPlayers$threeAttemptedPerMin <- allPlayers$cumThreeAttempted / allPlayers$cumMin
allPlayers$twoAttemptedPerMin <- (allPlayers$cumFgAttempted - allPlayers$cumThreeAttempted) / allPlayers$cumMin
allPlayers$threeProp <- allPlayers$Three.Attempted / allPlayers$Fg.Attempted
allPlayers$cumFtMadePerFgAttempted <- allPlayers$cumFTMade / allPlayers$cumFgAttempted
allPlayers$lastYearFtPerc <- allPlayers$LastYearFtMade / allPlayers$LastYearFTAttempted
allPlayers$cumFtPerc <- allPlayers$cumFTMade / allPlayers$cumFTAttempted
#########
allPlayers <- allPlayers[order(allPlayers$PlayerId, allPlayers$GameId),]
thisYearLastGame <- aggregate(gamesPlayedSeason ~ PlayerId, subset(allPlayers, allPlayers$seasonYear == 2021 & allPlayers$Min > 0), max)
colnames(thisYearLastGame) <- c("PlayerId", "lastGame")
allPlayers <- merge(allPlayers, thisYearLastGame, by = "PlayerId", all.x = T)
naPlayers <- subset(allPlayers, is.na(allPlayers$lastGame))
allPlayers <- subset(allPlayers, allPlayers$seasonYear == 2021 & allPlayers$gamesPlayedSeason == allPlayers$lastGame)
if(nrow(naPlayers) > 0){
missingPlayers <- createMissingPlayers(naPlayers)
allPlayers <- rbind(allPlayers, missingPlayers)
}
#create dir
if(!dir.exists(TODAY_DIR)){
dir.create(TODAY_DIR)
}
TODAY_DIR
saveRDS(allPlayers, file = paste0(TODAY_DIR, "\\allPlayers.rds"))
View(allPlayers)
View(allPlayers)
allPlayers <- allPlayers[c("PlayerId", "averageMinutes", "cumPercAttemptedPerMinute", "lastGameAttemptedPerMin",
"lastYeartwoPerc", "cumTwoPerc", "lastYearThreePerc", "cumThreePerc",
"lastYearThreeProp", "cumThreeProp", "cumFtMadePerFgAttempted",
"lastYearFtPerc", "cumFtPerc")]
View(allPlayers)
library(stringr)
library(jsonlite)
library(stringr)
PLAYER_DIR = paste0("C:\\Users\\Antonio\\Documents\\NBA\\api\\data\\", Sys.Date(), "\\players.csv")
BASE_DIR <- paste0("C:/Users/Antonio/Documents/NBA/api/data/", Sys.Date())
files <- list.files(BASE_DIR, full.names = T)
source("C:\\Users\\Antonio\\Documents\\NBA\\player-model\\build java data\\Build players data.R")
source("C:\\Users\\Antonio\\Documents\\NBA\\player-model\\build java data\\Build players data.R")
TODAY_DIR = paste0("C:\\Users\\Antonio\\Documents\\NBA\\player-model\\build java data\\data\\", Sys.Date())
TODAY_DIR
Documents
TODAY_DIR = paste0("C:\\Users\\Antonio\\Documents\\NBA\\player-model\\build java data\\data\\", Sys.Date())
TODAY_FD_DIR = paste0("C:\\Users\Antonio\\Documents\\NBA\\api\\data\\",  Sys.Date())
TODAY_FD_DIR = paste0("C:\\Users\\Antonio\\Documents\\NBA\\api\\data\\",  Sys.Date())
FD_CSV_DIR <- paste0(TODAY_DIR, "\\players.csv")
FD_CSV_DIR
file.exists(FD_CSV_DIR)
FD_CSV_DIR <- paste0(TODAY_FD_DIR, "\\players.csv")
file.exists(FD_CSV_DIR)
SHOULD_UPDATE_ROTO_DATA <- T
if(!file.exists(FD_CSV_DIR) | SHOULD_UPDATE_ROTO_DATA){
source("C:\\Users\\Antonio\\Documents\\NBA\\api\\2. Read rotogrinders data.R")
source("C:\\Users\\Antonio\\Documents\\NBA\\api\\3. Format rotogrinders data.R")
}
library(stringr)
library(jsonlite)
library(stringr)
PLAYER_DIR = paste0("C:\\Users\\Antonio\\Documents\\NBA\\api\\data\\", Sys.Date(), "\\players.csv")
BASE_DIR <- paste0("C:/Users/Antonio/Documents/NBA/api/data/", Sys.Date())
files <- list.files(BASE_DIR, full.names = T)
source("C:\\Users\\Antonio\\Documents\\NBA\\player-model\\build java data\\Build players data.R")
TODAY_DIR = paste0("C:\\Users\\Antonio\\Documents\\NBA\\player-model\\build java data\\data\\", Sys.Date())
TODAY_FD_DIR = paste0("C:\\Users\\Antonio\\Documents\\NBA\\api\\data\\",  Sys.Date())
FD_CSV_DIR <- paste0(TODAY_FD_DIR, "\\players.csv")
ALL_DATA_RDS_DIR <- paste0(TODAY_DIR, "\\allPlayers.rds")
SHOULD_UPDATE_ROTO_DATA <- T
if(!file.exists(FD_CSV_DIR) | SHOULD_UPDATE_ROTO_DATA){
source("C:\\Users\\Antonio\\Documents\\NBA\\api\\2. Read rotogrinders data.R")
source("C:\\Users\\Antonio\\Documents\\NBA\\api\\3. Format rotogrinders data.R")
}
file.exists(ALL_DATA_RDS_DIR)
ALL_DATA_RDS_DIR
if(file.exists(ALL_DATA_RDS_DIR)){
allPlayers <- readRDS(file = ALL_DATA_RDS_DIR)
if(max(as.Date(as.character(allPlayers$Date), "%Y%m%d")) != Sys.Date() - 1){
allPlayers <- getPlayersData()
}
}else{
allPlayers <- getPlayersData()
}
fdData <- read.csv(FD_CSV_DIR)
View(fdData)
colnames(fdData)
fdData <- unique(fdData[-c("X", "slateId", "salary", "positionfd")])
fdData <- unique(fdData[,-c("X", "slateId", "salary", "positionfd")])
which(colnames(fdData) %in% c("X", "slateId", "salary", "positionfd"))
fdData <- unique(fdData[,-which(colnames(fdData) %in% c("X", "slateId", "salary", "positionfd"))])
fdData <- unique(fdData[,-which(colnames(fdData) %in% c("X", "slateId", "salary", "positionfd"))])
fdData$O.U <- NA
fdData <- read.csv(FD_CSV_DIR)
fdData <- unique(fdData[,-which(colnames(fdData) %in% c("X", "slateId", "salary", "positionfd"))])
View(fdData)
fdData$O.U <- NA
fdData$Total <- NA
mappings <- unique(read.csv("C:\\Users\\Antonio\\Documents\\NBA\\player-model\\build java data\\MAPPINGS_ROTO.csv")[c(1,3)])
strangeChar <- substr(mappings$rotoName[106],start = 6,stop = 6)
mappings$Name <- str_replace_all(as.character(mappings$rotoName), strangeChar, " ")
mappings <- unique(mappings[c("PlayerId", "Name")])
fdData <- merge(fdData, mappings, by = "Name", all.x = T)
colnames(fdData)[colnames(fdData) == "name"]
colnames(fdData)[colnames(fdData) == "name"] <- "Name"
fdData <- merge(fdData, mappings, by = "Name", all.x = T)
View(fdData)
allPlayers <- allPlayers[c("PlayerId", "averageMinutes", "cumPercAttemptedPerMinute", "lastGameAttemptedPerMin",
"lastYeartwoPerc", "cumTwoPerc", "lastYearThreePerc", "cumThreePerc",
"lastYearThreeProp", "cumThreeProp", "cumFtMadePerFgAttempted",
"lastYearFtPerc", "cumFtPerc")]
fdData <- merge(fdData, allPlayers, by = "PlayerId", all.x = T)
fdData$timestamp <- as.numeric(Sys.time())
TODAY_DIR
ALL_DATA_RDS_DIR
TODAY_DIR
ALL_DATA_RDS_DIR
TODAY_DIR
TODAY_DIR = paste0("C:\\Users\\Antonio\\Documents\\NBA\\player-model\\build java data\\data\\", Sys.Date())
write.csv(fdData, paste0(TODAY_DIR, "\\javaData.csv"))
View(fdData)
library(stringr)
library(jsonlite)
library(stringr)
PLAYER_DIR = paste0("C:\\Users\\Antonio\\Documents\\NBA\\api\\data\\", Sys.Date(), "\\players.csv")
BASE_DIR <- paste0("C:/Users/Antonio/Documents/NBA/api/data/", Sys.Date())
files <- list.files(BASE_DIR, full.names = T)
source("C:\\Users\\Antonio\\Documents\\NBA\\player-model\\build java data\\Build players data.R")
TODAY_DIR = paste0("C:\\Users\\Antonio\\Documents\\NBA\\player-model\\build java data\\data\\", Sys.Date())
TODAY_FD_DIR = paste0("C:\\Users\\Antonio\\Documents\\NBA\\api\\data\\",  Sys.Date())
FD_CSV_DIR <- paste0(TODAY_FD_DIR, "\\players.csv")
ALL_DATA_RDS_DIR <- paste0(TODAY_DIR, "\\allPlayers.rds")
SHOULD_UPDATE_ROTO_DATA <- T
if(!file.exists(FD_CSV_DIR) | SHOULD_UPDATE_ROTO_DATA){
source("C:\\Users\\Antonio\\Documents\\NBA\\api\\2. Read rotogrinders data.R")
source("C:\\Users\\Antonio\\Documents\\NBA\\api\\3. Format rotogrinders data.R")
}
if(file.exists(ALL_DATA_RDS_DIR)){
allPlayers <- readRDS(file = ALL_DATA_RDS_DIR)
if(max(as.Date(as.character(allPlayers$Date), "%Y%m%d")) != Sys.Date() - 1){
allPlayers <- getPlayersData()
}
}else{
allPlayers <- getPlayersData()
}
fdData <- read.csv(FD_CSV_DIR)
fdData <- unique(fdData[,-which(colnames(fdData) %in% c("X", "slateId", "salary", "positionfd"))])
fdData$O.U <- NA
fdData$Total <- NA
mappings <- unique(read.csv("C:\\Users\\Antonio\\Documents\\NBA\\player-model\\build java data\\MAPPINGS_ROTO.csv")[c(1,3)])
strangeChar <- substr(mappings$rotoName[106],start = 6,stop = 6)
mappings$Name <- str_replace_all(as.character(mappings$rotoName), strangeChar, " ")
mappings <- unique(mappings[c("PlayerId", "Name")])
colnames(fdData)[colnames(fdData) == "name"] <- "Name"
fdData <- merge(fdData, mappings, by = "Name", all.x = T)
View(fdData)
allPlayers <- allPlayers[c("PlayerId", "Position", "averageMinutes", "cumPercAttemptedPerMinute", "lastGameAttemptedPerMin",
"lastYeartwoPerc", "cumTwoPerc", "lastYearThreePerc", "cumThreePerc",
"lastYearThreeProp", "cumThreeProp", "cumFtMadePerFgAttempted",
"lastYearFtPerc", "cumFtPerc")]
fdData <- merge(fdData, allPlayers, by = "PlayerId", all.x = T)
fdData$timestamp <- as.numeric(Sys.time())
write.csv(fdData, paste0(TODAY_DIR, "\\javaData.csv"))
TODAY_DIR
write.csv(fdData, paste0(paste0("C:\\Users\\Antonio\\Documents\\NBA\\player-model\\build java data\\data\\", Sys.Date()), "\\javaData.csv"))
View(fdData)
library(stringr)
library(jsonlite)
library(stringr)
PLAYER_DIR = paste0("C:\\Users\\Antonio\\Documents\\NBA\\api\\data\\", Sys.Date(), "\\players.csv")
BASE_DIR <- paste0("C:/Users/Antonio/Documents/NBA/api/data/", Sys.Date())
files <- list.files(BASE_DIR, full.names = T)
source("C:\\Users\\Antonio\\Documents\\NBA\\player-model\\build java data\\Build players data.R")
TODAY_DIR = paste0("C:\\Users\\Antonio\\Documents\\NBA\\player-model\\build java data\\data\\", Sys.Date())
TODAY_FD_DIR = paste0("C:\\Users\\Antonio\\Documents\\NBA\\api\\data\\",  Sys.Date())
FD_CSV_DIR <- paste0(TODAY_FD_DIR, "\\players.csv")
ALL_DATA_RDS_DIR <- paste0(TODAY_DIR, "\\allPlayers.rds")
SHOULD_UPDATE_ROTO_DATA <- T
if(!file.exists(FD_CSV_DIR) | SHOULD_UPDATE_ROTO_DATA){
source("C:\\Users\\Antonio\\Documents\\NBA\\api\\2. Read rotogrinders data.R")
source("C:\\Users\\Antonio\\Documents\\NBA\\api\\3. Format rotogrinders data.R")
}
if(file.exists(ALL_DATA_RDS_DIR)){
allPlayers <- readRDS(file = ALL_DATA_RDS_DIR)
if(max(as.Date(as.character(allPlayers$Date), "%Y%m%d")) != Sys.Date() - 1){
allPlayers <- getPlayersData()
}
}else{
allPlayers <- getPlayersData()
}
fdData <- read.csv(FD_CSV_DIR)
fdData <- unique(fdData[,-which(colnames(fdData) %in% c("X", "slateId", "salary", "positionfd"))])
fdData$O.U <- NA
fdData$Total <- NA
mappings <- unique(read.csv("C:\\Users\\Antonio\\Documents\\NBA\\player-model\\build java data\\MAPPINGS_ROTO.csv")[c(1,3)])
strangeChar <- substr(mappings$rotoName[106],start = 6,stop = 6)
mappings$Name <- str_replace_all(as.character(mappings$rotoName), strangeChar, " ")
mappings <- unique(mappings[c("PlayerId", "Name")])
colnames(fdData)[colnames(fdData) == "name"] <- "Name"
fdData <- merge(fdData, mappings, by = "Name", all.x = T)
allPlayers <- allPlayers[c("PlayerId", "Position", "averageMinutes", "cumPercAttemptedPerMinute", "lastGameAttemptedPerMin",
"lastYeartwoPerc", "cumTwoPerc", "lastYearThreePerc", "cumThreePerc",
"lastYearThreeProp", "cumThreeProp", "cumFtMadePerFgAttempted",
"lastYearFtPerc", "cumFtPerc")]
fdData <- merge(fdData, allPlayers, by = "PlayerId", all.x = T)
fdData$timestamp <- as.numeric(Sys.time())
View(fdData)
df = fdData
allPlayers <- getPlayersData()
View(allPlayers)
df = allPlayers
