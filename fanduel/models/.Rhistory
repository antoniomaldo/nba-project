strategy$numbTeams <- numbTeams
allData <- rbind(allData, strategy[11:ncol(strategy)])
winnings <- 0
won <- 0
numbLineUps <- 1
chosenLineUps <- chooseLineUps(strategy, numbLineUps, maxCommon = ifelse(numbTeams < 8, 4, 5))
for(row in 1:nrow(chosenLineUps)){
lineUp = chosenLineUps[row,]
won <- won + (sum(contests$cutline_prize[lineUp$actualPoints > contests$cutline_points]))
}
dayProfit <- won - nrow(chosenLineUps) * fees
backtest <- rbind(backtest, data.frame(slateId = id,
numTeams = numbTeams,
won = won,
fees = fees,
numbLineUps = numbLineUps,
numbContests = nrow(contests),
dayProfit = dayProfit,
meanCutlinePoints = mean(contests$cutline_points),
topLineUpPoints = chosenLineUps[1,"actualPoints"]
))
cumWinnigs <- cumWinnigs + won - nrow(chosenLineUps) * fees
print(cumWinnigs)
if(is.na(cumWinnigs)){
print(file)
}
}else{
print(paste0("No contests found for slate id -> ", id))
}
}else{
print(file)
}
} else{
print(paste0("No csv for file -> ", file))
}
}
aggregate(prizeWon ~ id, allData, sum)
plot.ts(cumsum(backtest$dayProfit))
plot.ts(cumsum(subset(backtest$dayProfit, backtest$numTeams > 6)))
plot.ts(cumsum(subset(backtest$dayProfit, backtest$numTeams > 8)))
sum(backtest$dayProfit[backtest$numTeams <= 4]) / sum(backtest$fees[backtest$numTeams <= 4] * backtest$numbLineUps[backtest$numTeams <= 4])
cumWinnigs <- 0
backtest <- data.frame()
allData <- data.frame()
for(file in listFiles[1:9]){
jsonDirs <- list.files(file, full.names = T)
csvFile <- jsonDirs[grepl(STRATEGY_NAME, jsonDirs)]
if(length(csvFile) > 0){
strategy <- read.csv(csvFile)
if(nrow(strategy) > 0){
#strategy$overThreeHundredTwentyFiveCum <- strategy$overFourHundredFiftyProb + strategy$overFourHundredTwentyFiveProb + strategy$overFourHundredProb + strategy$overThreeHundredSeventyFiveProb + strategy$overThreeHundredFiftyProb + strategy$overThreeHundredTwentyFiveProb
strategy$topFiftyPerc <- strategy$Top1 + strategy$Top2 + strategy$Top3 + strategy$Top4 + strategy$Top5
strategy$topThree <- strategy$Top1 + strategy$Top2 + strategy$Top3
strategy$topTwo <- strategy$Top1 + strategy$Top2
players <- read.csv(jsonDirs[grepl("players", jsonDirs)])
strategy = addActualPoints(strategy, players)
id <- str_split(str_split(file, pattern = "/")[[1]][2], pattern = "-")[[1]][1]
contests <- getDoubleUpContestDataForSlateId(id)
# contests <- subset(contests, contests$actualplayers >200)
if(nrow(contests) > 0){
numbTeams = length(unique(players$Team))
if(numbTeams <= 6){
strategy = strategy[order(-1 * strategy$Top1),] #chosen
}else if(numbTeams <= 10){
strategy = strategy[order(-1 * strategy$topTwo),] #chosen
}else{
strategy = strategy[order(-1 * strategy$Top5),] #chosen
}
strategy = strategy[order(-1 * strategy$topThree),] #chosen
strategy$id <- 1:nrow(strategy)
#maxPointsLineUp = max(strategy$actualPoints[strategy$id < 33])
fees <- sum(contests$entryfee)
strategy$prizeWon <- 0
for(i in 1:nrow(strategy)){
strategy$prizeWon[i] <- sum(contests$cutline_prize[contests$cutline_points < strategy$actualPoints[i]]) - fees
}
strategy$numbTeams <- numbTeams
allData <- rbind(allData, strategy[11:ncol(strategy)])
winnings <- 0
won <- 0
numbLineUps <- 1
chosenLineUps <- chooseLineUps(strategy, numbLineUps, maxCommon = ifelse(numbTeams < 8, 4, 5))
for(row in 1:nrow(chosenLineUps)){
lineUp = chosenLineUps[row,]
won <- won + (sum(contests$cutline_prize[lineUp$actualPoints > contests$cutline_points]))
}
dayProfit <- won - nrow(chosenLineUps) * fees
backtest <- rbind(backtest, data.frame(slateId = id,
numTeams = numbTeams,
won = won,
fees = fees,
numbLineUps = numbLineUps,
numbContests = nrow(contests),
dayProfit = dayProfit,
meanCutlinePoints = mean(contests$cutline_points),
topLineUpPoints = chosenLineUps[1,"actualPoints"]
))
cumWinnigs <- cumWinnigs + won - nrow(chosenLineUps) * fees
print(cumWinnigs)
if(is.na(cumWinnigs)){
print(file)
}
}else{
print(paste0("No contests found for slate id -> ", id))
}
}else{
print(file)
}
} else{
print(paste0("No csv for file -> ", file))
}
}
STRATEGY_NAME = "maxAvgMatchUpStrategy"
cumWinnigs <- 0
backtest <- data.frame()
allData <- data.frame()
for(file in listFiles[1:9]){
jsonDirs <- list.files(file, full.names = T)
csvFile <- jsonDirs[grepl(STRATEGY_NAME, jsonDirs)]
if(length(csvFile) > 0){
strategy <- read.csv(csvFile)
if(nrow(strategy) > 0){
#strategy$overThreeHundredTwentyFiveCum <- strategy$overFourHundredFiftyProb + strategy$overFourHundredTwentyFiveProb + strategy$overFourHundredProb + strategy$overThreeHundredSeventyFiveProb + strategy$overThreeHundredFiftyProb + strategy$overThreeHundredTwentyFiveProb
strategy$topFiftyPerc <- strategy$Top1 + strategy$Top2 + strategy$Top3 + strategy$Top4 + strategy$Top5
strategy$topThree <- strategy$Top1 + strategy$Top2 + strategy$Top3
strategy$topTwo <- strategy$Top1 + strategy$Top2
players <- read.csv(jsonDirs[grepl("players", jsonDirs)])
strategy = addActualPoints(strategy, players)
id <- str_split(str_split(file, pattern = "/")[[1]][2], pattern = "-")[[1]][1]
contests <- getDoubleUpContestDataForSlateId(id)
# contests <- subset(contests, contests$actualplayers >200)
if(nrow(contests) > 0){
numbTeams = length(unique(players$Team))
if(numbTeams <= 6){
strategy = strategy[order(-1 * strategy$Top1),] #chosen
}else if(numbTeams <= 10){
strategy = strategy[order(-1 * strategy$topTwo),] #chosen
}else{
strategy = strategy[order(-1 * strategy$Top5),] #chosen
}
strategy = strategy[order(-1 * strategy$topThree),] #chosen
strategy$id <- 1:nrow(strategy)
#maxPointsLineUp = max(strategy$actualPoints[strategy$id < 33])
fees <- sum(contests$entryfee)
strategy$prizeWon <- 0
for(i in 1:nrow(strategy)){
strategy$prizeWon[i] <- sum(contests$cutline_prize[contests$cutline_points < strategy$actualPoints[i]]) - fees
}
strategy$numbTeams <- numbTeams
allData <- rbind(allData, strategy[11:ncol(strategy)])
winnings <- 0
won <- 0
numbLineUps <- 1
chosenLineUps <- chooseLineUps(strategy, numbLineUps, maxCommon = ifelse(numbTeams < 8, 4, 5))
for(row in 1:nrow(chosenLineUps)){
lineUp = chosenLineUps[row,]
won <- won + (sum(contests$cutline_prize[lineUp$actualPoints > contests$cutline_points]))
}
dayProfit <- won - nrow(chosenLineUps) * fees
backtest <- rbind(backtest, data.frame(slateId = id,
numTeams = numbTeams,
won = won,
fees = fees,
numbLineUps = numbLineUps,
numbContests = nrow(contests),
dayProfit = dayProfit,
meanCutlinePoints = mean(contests$cutline_points),
topLineUpPoints = chosenLineUps[1,"actualPoints"]
))
cumWinnigs <- cumWinnigs + won - nrow(chosenLineUps) * fees
print(cumWinnigs)
if(is.na(cumWinnigs)){
print(file)
}
}else{
print(paste0("No contests found for slate id -> ", id))
}
}else{
print(file)
}
} else{
print(paste0("No csv for file -> ", file))
}
}
STRATEGY_NAME = "maxAvgMatchUp3Strategy"
cumWinnigs <- 0
backtest <- data.frame()
allData <- data.frame()
for(file in listFiles[1:10]){
jsonDirs <- list.files(file, full.names = T)
csvFile <- jsonDirs[grepl(STRATEGY_NAME, jsonDirs)]
if(length(csvFile) > 0){
strategy <- read.csv(csvFile)
if(nrow(strategy) > 0){
#strategy$overThreeHundredTwentyFiveCum <- strategy$overFourHundredFiftyProb + strategy$overFourHundredTwentyFiveProb + strategy$overFourHundredProb + strategy$overThreeHundredSeventyFiveProb + strategy$overThreeHundredFiftyProb + strategy$overThreeHundredTwentyFiveProb
strategy$topFiftyPerc <- strategy$Top1 + strategy$Top2 + strategy$Top3 + strategy$Top4 + strategy$Top5
strategy$topThree <- strategy$Top1 + strategy$Top2 + strategy$Top3
strategy$topTwo <- strategy$Top1 + strategy$Top2
players <- read.csv(jsonDirs[grepl("players", jsonDirs)])
strategy = addActualPoints(strategy, players)
id <- str_split(str_split(file, pattern = "/")[[1]][2], pattern = "-")[[1]][1]
contests <- getDoubleUpContestDataForSlateId(id)
# contests <- subset(contests, contests$actualplayers >200)
if(nrow(contests) > 0){
numbTeams = length(unique(players$Team))
if(numbTeams <= 6){
strategy = strategy[order(-1 * strategy$Top1),] #chosen
}else if(numbTeams <= 10){
strategy = strategy[order(-1 * strategy$topTwo),] #chosen
}else{
strategy = strategy[order(-1 * strategy$Top5),] #chosen
}
strategy = strategy[order(-1 * strategy$topThree),] #chosen
strategy$id <- 1:nrow(strategy)
#maxPointsLineUp = max(strategy$actualPoints[strategy$id < 33])
fees <- sum(contests$entryfee)
strategy$prizeWon <- 0
for(i in 1:nrow(strategy)){
strategy$prizeWon[i] <- sum(contests$cutline_prize[contests$cutline_points < strategy$actualPoints[i]]) - fees
}
strategy$numbTeams <- numbTeams
allData <- rbind(allData, strategy[11:ncol(strategy)])
winnings <- 0
won <- 0
numbLineUps <- 1
chosenLineUps <- chooseLineUps(strategy, numbLineUps, maxCommon = ifelse(numbTeams < 8, 4, 5))
for(row in 1:nrow(chosenLineUps)){
lineUp = chosenLineUps[row,]
won <- won + (sum(contests$cutline_prize[lineUp$actualPoints > contests$cutline_points]))
}
dayProfit <- won - nrow(chosenLineUps) * fees
backtest <- rbind(backtest, data.frame(slateId = id,
numTeams = numbTeams,
won = won,
fees = fees,
numbLineUps = numbLineUps,
numbContests = nrow(contests),
dayProfit = dayProfit,
meanCutlinePoints = mean(contests$cutline_points),
topLineUpPoints = chosenLineUps[1,"actualPoints"]
))
cumWinnigs <- cumWinnigs + won - nrow(chosenLineUps) * fees
print(cumWinnigs)
if(is.na(cumWinnigs)){
print(file)
}
}else{
print(paste0("No contests found for slate id -> ", id))
}
}else{
print(file)
}
} else{
print(paste0("No csv for file -> ", file))
}
}
aggregate(prizeWon ~ id, allData, sum)
backtest <- subset(backtest, backtest$slateId < 46000)
sum(backtest$dayProfit) / sum(backtest$fees * backtest$numbLineUps)
sum(backtest$dayProfit[backtest$numTeams > 6]) / sum(backtest$fees[backtest$numTeams > 6] * backtest$numbLineUps[backtest$numTeams > 6])
sum(backtest$dayProfit[backtest$numTeams > 8]) / sum(backtest$fees[backtest$numTeams > 8] * backtest$numbLineUps[backtest$numTeams > 8])
sum(backtest$dayProfit[backtest$slateId < 46000]) / sum(backtest$fees[backtest$slateId < 46000] * backtest$numbLineUps[backtest$slateId < 46000])
plot.ts(cumsum(backtest$dayProfit)/cumsum(backtest$fees * backtest$numbLineUps))
plot.ts(cumsum(backtest$dayProfit))
plot.ts(cumsum(subset(backtest$dayProfit, backtest$numTeams > 6)))
plot.ts(cumsum(subset(backtest$dayProfit, backtest$numTeams > 8)))
library(arm)
library(h2o)
library(RODBC)
server <- odbcConnect("Server")
allPlayers <- sqlQuery(server, "SELECT * FROM nba.roto_preds")
odbcClose(server)
#Best and second best player
allPlayers <- subset(allPlayers, allPlayers$gameid < 401224690)
bestPlayer <- aggregate(points ~ team + date, allPlayers, max)
colnames(bestPlayer)[3] <- "bestPlayerExpPoints"
allPlayers <- merge(allPlayers, bestPlayer, by = c("team", "date"))
allPlayers$isBestPlayer <- 1 * (allPlayers$points == allPlayers$bestPlayerExpPoints)
secondBest <- aggregate(points ~ team + date, subset(allPlayers, allPlayers$isBestPlayer == 0), max)
colnames(secondBest)[3] <- "secondBestPlayerExpPoints"
allPlayers <- merge(allPlayers, secondBest, by = c("team", "date"))
allPlayers$isSecondBestPlayer <- 1 * (allPlayers$points == allPlayers$secondBestPlayerExpPoints)
allPlayers <- merge(allPlayers, subset(allPlayers[c("team", "date", "fdpoints")], allPlayers$isBestPlayer == 1), by = c("team", "date"))
allPlayers <- merge(allPlayers, subset(allPlayers[c("team", "date", "fdpoints.x")], allPlayers$isSecondBestPlayer == 1), by = c("team", "date"))
colnames(allPlayers)[colnames(allPlayers) == "fdpoints.x.x"] <- "fdPoints"
colnames(allPlayers)[colnames(allPlayers) == "fdpoints.y"] <- "bestPlayerfdPoints"
colnames(allPlayers)[colnames(allPlayers) == "fdpoints.x.y"] <- "secondBestPlayerfdPoints"
View(allPlayers)
agg <- aggregate(pmin ~ GameId + team, allPlayers, sum)
agg <- aggregate(pmin ~ gameid + team, allPlayers, sum)
View(agg)
idsToUse <- subset(agg, abs(agg$pmin - 240) < 5)
View(idsToUse)
agg <- aggregate(pmin ~ gameid + team, allPlayers, sum)
agg <- merge(agg, aggregate(points ~ gameid + team, allPlayers, sum), by = c("gameid", "team"))
View(agg)
idsToUse <- subset(agg, abs(agg$pmin - 240) < 5)
colnames(iidsidsToUse)
colnames(idsToUse)
colnames(idsToUse) <- c("gameid", "team", "totalTeamPmin", "totalTeamPoints")
agg <- aggregate(pmin ~ gameid + team, allPlayers, sum)
agg <- merge(agg, aggregate(points ~ gameid + team, allPlayers, sum), by = c("gameid", "team"))
allPlayers <- merge(allPlayers, agg, by = c("gameid", "team"))
colnames(agg)
library(arm)
library(h2o)
library(RODBC)
server <- odbcConnect("Server")
allPlayers <- sqlQuery(server, "SELECT * FROM nba.roto_preds")
odbcClose(server)
#Best and second best player
allPlayers <- subset(allPlayers, allPlayers$gameid < 401224690)
bestPlayer <- aggregate(points ~ team + date, allPlayers, max)
colnames(bestPlayer)[3] <- "bestPlayerExpPoints"
allPlayers <- merge(allPlayers, bestPlayer, by = c("team", "date"))
allPlayers$isBestPlayer <- 1 * (allPlayers$points == allPlayers$bestPlayerExpPoints)
secondBest <- aggregate(points ~ team + date, subset(allPlayers, allPlayers$isBestPlayer == 0), max)
colnames(secondBest)[3] <- "secondBestPlayerExpPoints"
allPlayers <- merge(allPlayers, secondBest, by = c("team", "date"))
allPlayers$isSecondBestPlayer <- 1 * (allPlayers$points == allPlayers$secondBestPlayerExpPoints)
allPlayers <- merge(allPlayers, subset(allPlayers[c("team", "date", "fdpoints")], allPlayers$isBestPlayer == 1), by = c("team", "date"))
allPlayers <- merge(allPlayers, subset(allPlayers[c("team", "date", "fdpoints.x")], allPlayers$isSecondBestPlayer == 1), by = c("team", "date"))
colnames(allPlayers)[colnames(allPlayers) == "fdpoints.x.x"] <- "fdPoints"
colnames(allPlayers)[colnames(allPlayers) == "fdpoints.y"] <- "bestPlayerfdPoints"
colnames(allPlayers)[colnames(allPlayers) == "fdpoints.x.y"] <- "secondBestPlayerfdPoints"
agg <- aggregate(pmin ~ gameid + team, allPlayers, sum)
agg <- merge(agg, aggregate(points ~ gameid + team, allPlayers, sum), by = c("gameid", "team"))
colnames(agg) <- c("gameid", "team", "totalTeamPmin", "totalTeamPoints")
allPlayers <- merge(allPlayers, agg, by = c("gameid", "team"))
allPlayers <- subset(allPlayers, allPlayers(allPlayers$totalTeamPmin - 240) < 5)
allPlayers <- subset(allPlayers, abs(allPlayers$totalTeamPmin - 240) < 5)
allPlayers$resid <- allPlayers$fdPoints - allPlayers$points
mean(allPlayers$resid)
binnedplot(allPlayers$totalTeamPmin, allPlayers$resid)
allPlayers$pointsCeilDistance = allPlayers$ceil - allPlayers$points
allPlayers$homeExpPoints <- (allPlayers$totalpoints - allPlayers$matchspread) / 2
allPlayers$awayExpPoints <- allPlayers$totalpoints - allPlayers$homeExpPoints
allPlayers$ownExpPoints <- ifelse(allPlayers$ishomeplayer, allPlayers$homeExpPoints, allPlayers$awayExpPoints)
allPlayers$oppExpPoints <- ifelse(!allPlayers$ishomeplayer, allPlayers$homeExpPoints, allPlayers$awayExpPoints)
allPlayers$expPointsDiff <- allPlayers$ownExpPoints - allPlayers$oppExpPoints
binnedplot(allPlayers$totalTeamPmin, allPlayers$ownExpPoints)
binnedplot(allPlayers$totalTeamPmin, allPlayers$resid)
agg <- aggregate(pmin ~ gameid + team, allPlayers, sum)
agg <- merge(agg, aggregate(points ~ gameid + team, allPlayers, sum), by = c("gameid", "team"))
agg <- merge(agg, aggregate(fdPoints ~ gameid + team, allPlayers, sum), by = c("gameid", "team"))
colnames(agg) <- c("gameid", "team", "totalTeamPmin", "totalTeamPoints", "totalFdTeamPoints")
allPlayers <- merge(allPlayers, agg, by = c("gameid", "team"))
allPlayers <- subset(allPlayers, abs(allPlayers$totalTeamPmin - 240) < 5)
allPlayers$resid <- allPlayers$totalFdTeamPoints - allPlayers$totalTeamPoints
agg$resid <- agg$totalTeamPoints - agg$totalFdTeamPoints
binnedplot(agg$totalTeamPoints, agg$totalFdTeamPoints)
binnedplot(agg$resid, agg$totalFdTeamPoints)
binnedplot(agg$totalTeamPoints, agg$resid)
agg <- merge(agg, aggregate(totalpoints ~ gameid + team, allPlayers, max), by = c("gameid", "team"))
agg <- aggregate(pmin ~ gameid + team, allPlayers, sum)
agg <- merge(agg, aggregate(points ~ gameid + team, allPlayers, sum), by = c("gameid", "team"))
agg <- merge(agg, aggregate(fdPoints ~ gameid + team, allPlayers, sum), by = c("gameid", "team"))
library(arm)
library(h2o)
library(RODBC)
server <- odbcConnect("Server")
allPlayers <- sqlQuery(server, "SELECT * FROM nba.roto_preds")
odbcClose(server)
#Best and second best player
allPlayers <- subset(allPlayers, allPlayers$gameid < 401224690)
bestPlayer <- aggregate(points ~ team + date, allPlayers, max)
colnames(bestPlayer)[3] <- "bestPlayerExpPoints"
allPlayers <- merge(allPlayers, bestPlayer, by = c("team", "date"))
allPlayers$isBestPlayer <- 1 * (allPlayers$points == allPlayers$bestPlayerExpPoints)
secondBest <- aggregate(points ~ team + date, subset(allPlayers, allPlayers$isBestPlayer == 0), max)
colnames(secondBest)[3] <- "secondBestPlayerExpPoints"
allPlayers <- merge(allPlayers, secondBest, by = c("team", "date"))
allPlayers$isSecondBestPlayer <- 1 * (allPlayers$points == allPlayers$secondBestPlayerExpPoints)
allPlayers <- merge(allPlayers, subset(allPlayers[c("team", "date", "fdpoints")], allPlayers$isBestPlayer == 1), by = c("team", "date"))
allPlayers <- merge(allPlayers, subset(allPlayers[c("team", "date", "fdpoints.x")], allPlayers$isSecondBestPlayer == 1), by = c("team", "date"))
colnames(allPlayers)[colnames(allPlayers) == "fdpoints.x.x"] <- "fdPoints"
colnames(allPlayers)[colnames(allPlayers) == "fdpoints.y"] <- "bestPlayerfdPoints"
colnames(allPlayers)[colnames(allPlayers) == "fdpoints.x.y"] <- "secondBestPlayerfdPoints"
allPlayers$pointsCeilDistance = allPlayers$ceil - allPlayers$points
allPlayers$homeExpPoints <- (allPlayers$totalpoints - allPlayers$matchspread) / 2
allPlayers$awayExpPoints <- allPlayers$totalpoints - allPlayers$homeExpPoints
allPlayers$ownExpPoints <- ifelse(allPlayers$ishomeplayer, allPlayers$homeExpPoints, allPlayers$awayExpPoints)
allPlayers$oppExpPoints <- ifelse(!allPlayers$ishomeplayer, allPlayers$homeExpPoints, allPlayers$awayExpPoints)
allPlayers$expPointsDiff <- allPlayers$ownExpPoints - allPlayers$oppExpPoints
agg <- aggregate(pmin ~ gameid + team, allPlayers, sum)
agg <- merge(agg, aggregate(points ~ gameid + team, allPlayers, sum), by = c("gameid", "team"))
agg <- merge(agg, aggregate(fdPoints ~ gameid + team, allPlayers, sum), by = c("gameid", "team"))
agg <- merge(agg, aggregate(ownExpPoints ~ gameid + team, allPlayers, max), by = c("gameid", "team"))
agg <- merge(agg, aggregate(oppExpPoints ~ gameid + team, allPlayers, max), by = c("gameid", "team"))
colnames(agg) <- c("gameid", "team", "totalTeamPmin", "totalTeamPoints", "totalFdTeamPoints", "ownExpPoints", "oppExpPoints")
agg <- subset(agg, abs(agg$totalTeamPmin - 240) < 5)
agg$resid <- agg$totalTeamPoints - agg$totalFdTeamPoints
binnedplot(allPlayers$totalTeamPmin, allPlayers$resid)
binnedplot(agg$totalTeamPmin, agg$resid)
binnedplot(agg$ownExpPoints, agg$resid)
binnedplot(agg$oppExpPoints, agg$resid)
library(arm)
library(h2o)
library(RODBC)
server <- odbcConnect("Server")
allPlayers <- sqlQuery(server, "SELECT * FROM nba.roto_preds")
odbcClose(server)
#Best and second best player
allPlayers <- subset(allPlayers, allPlayers$gameid < 401224690)
bestPlayer <- aggregate(points ~ team + date, allPlayers, max)
colnames(bestPlayer)[3] <- "bestPlayerExpPoints"
allPlayers <- merge(allPlayers, bestPlayer, by = c("team", "date"))
allPlayers$isBestPlayer <- 1 * (allPlayers$points == allPlayers$bestPlayerExpPoints)
secondBest <- aggregate(points ~ team + date, subset(allPlayers, allPlayers$isBestPlayer == 0), max)
colnames(secondBest)[3] <- "secondBestPlayerExpPoints"
allPlayers <- merge(allPlayers, secondBest, by = c("team", "date"))
allPlayers$isSecondBestPlayer <- 1 * (allPlayers$points == allPlayers$secondBestPlayerExpPoints)
allPlayers <- merge(allPlayers, subset(allPlayers[c("team", "date", "fdpoints")], allPlayers$isBestPlayer == 1), by = c("team", "date"))
allPlayers <- merge(allPlayers, subset(allPlayers[c("team", "date", "fdpoints.x")], allPlayers$isSecondBestPlayer == 1), by = c("team", "date"))
colnames(allPlayers)[colnames(allPlayers) == "fdpoints.x.x"] <- "fdPoints"
colnames(allPlayers)[colnames(allPlayers) == "fdpoints.y"] <- "bestPlayerfdPoints"
colnames(allPlayers)[colnames(allPlayers) == "fdpoints.x.y"] <- "secondBestPlayerfdPoints"
#Models
#20200114
allPlayers$id[which(allPlayers$Date == "20191022")][1]
allPlayers$id[which(allPlayers$Date == "20200114")][1]
allPlayers$pointsCeilDistance = allPlayers$ceil - allPlayers$points
allPlayers$homeExpPoints <- (allPlayers$totalpoints - allPlayers$matchspread) / 2
allPlayers$awayExpPoints <- allPlayers$totalpoints - allPlayers$homeExpPoints
allPlayers$ownExpPoints <- ifelse(allPlayers$ishomeplayer, allPlayers$homeExpPoints, allPlayers$awayExpPoints)
allPlayers$oppExpPoints <- ifelse(!allPlayers$ishomeplayer, allPlayers$homeExpPoints, allPlayers$awayExpPoints)
allPlayers$expPointsDiff <- allPlayers$ownExpPoints - allPlayers$oppExpPoints
allPlayers$homeDiff <- allPlayers$homefinalscore - allPlayers$awayfinalscore
allPlayers$scoreDiff = ifelse(allPlayers$ishomeplayer, allPlayers$homeDiff , -1 * allPlayers$homeDiff)
allPlayers$expDiff = ifelse(allPlayers$ishomeplayer, -1 * allPlayers$matchspread , allPlayers$matchspread)
allPlayers$expDiffMinusSpread <- allPlayers$expDiff - allPlayers$scoreDiff
allPlayers <- subset(allPlayers, allPlayers$gameid != 401161205 & allPlayers$gameid != 401071372 & allPlayers$gameid != 401071180 & allPlayers$gameid != 401071208)
aggPmin <- aggregate(pmin ~ gameid + team + seasonyear,  allPlayers, sum)
idsToRemove <- subset(aggPmin$gameid, abs(aggPmin$pmin - 240) > 15)
allPlayers <- subset(allPlayers, !allPlayers$gameid %in% idsToRemove)
#Zero points model
allPlayers$zeroPoints <- as.factor(1 * (allPlayers$fdPoints <= 0))
testData <- subset(allPlayers, allPlayers$seasonyear == 2020)
trainData <- subset(allPlayers, allPlayers$seasonyear < 2020)
h2o.init()
testDataH2o <- as.h2o(testData)
trainDataH2o <- as.h2o(trainData)
modelZeroPoints <- h2o.gbm(x = c("points" ,"pmin", "scoreDiff", "expDiff", "expDiffMinusSpread"), y = "zeroPoints",
training_frame = as.h2o(allPlayers), model_id = "fdZeroPoints",
seed = 12,
nfolds = 10,
keep_cross_validation_predictions = TRUE,
fold_assignment = "Modulo",
distribution = "bernoulli",
max_depth = 2,
min_rows = 100,
ntrees = 100)
h2o.auc(modelZeroPoints)
h2o.auc(modelZeroPoints, xval = T)
testData$fdZeroPointsPred <- as.vector(h2o.predict(modelZeroPoints, testDataH2o)$p1)
testData$gbmResid <- as.numeric(testData$zeroPoints) - 1 - testData$fdZeroPointsPred
binnedplot(testData$bestPlayerExpPoints - testData$bestPlayerfdPoints, testData$gbmResid)
binnedplot(testData$fdZeroPointsPred, testData$gbmResid)
binnedplot(testData$points, testData$gbmResid)
binnedplot(testData$ceil, testData$gbmResid)
binnedplot(testData$pointsCeilDistance, testData$gbmResid)
binnedplot(testData$ownExpPoints, testData$gbmResid)
binnedplot(testData$oppExpPoints, testData$gbmResid)
binnedplot(testData$expPointsDiff, testData$gbmResid)
binnedplot(testData$fdZeroPointsPred[testData$seasonyear == 2020], testData$gbmResid[testData$seasonyear == 2020])
binnedplot(testData$points[testData$seasonyear == 2020], testData$gbmResid[testData$seasonyear == 2020])
binnedplot(testData$scoreDiff[testData$seasonyear == 2020], testData$gbmResid[testData$seasonyear == 2020])
#Models given a non zero prediction
allPlayersNoZero <- subset(allPlayers, allPlayers$fdPoints > 0)
testData <- subset(allPlayersNoZero, allPlayersNoZero$seasonyear == 2020)
trainData <- subset(allPlayersNoZero, allPlayersNoZero$seasonyear < 2020)
## Fd points given score diff model
h2o.init()
testDataH2o <- as.h2o(testData)
trainDataH2o <- as.h2o(trainData)
modelGBMPred <- h2o.gbm(x = c("points" ,"pmin", "scoreDiff", "expDiff", "expDiffMinusSpread"), y = "fdPoints",
training_frame = as.h2o(allPlayersNoZero), model_id = "fdPointsGivenDiffModel",
seed = 12,
nfolds = 10,
keep_cross_validation_predictions = TRUE,
fold_assignment = "Modulo",
distribution = "gamma",
max_depth = 5,
min_rows = 600,
ntrees = 100)
h2o.performance(modelGBMPred)
h2o.performance(modelGBMPred, xval = T)
testData$fdPointsPred <- as.vector(h2o.predict(modelGBMPred, testDataH2o))
testData$gbmResid <- as.numeric(testData$fdPoints) - testData$fdPointsPred
allPlayers$fdZeroPointsPred <- as.vector(h2o.predict(modelZeroPoints, as.h2o(allPlayers))$p1)
allPlayers$fdPointsPred <- as.vector(h2o.predict(modelGBMPred, as.h2o(allPlayers)))
allPlayers$finalPred <- (1 - allPlayers$fdZeroPointsPred) * allPlayers$fdPointsPred
mean(allPlayers$finalPred - allPlayers$fdPoints)
agg <- aggregate(pmin ~ gameid + team, allPlayers, sum)
agg <- merge(agg, aggregate(finalPred ~ gameid + team, allPlayers, sum), by = c("gameid", "team"))
agg <- merge(agg, aggregate(fdPoints ~ gameid + team, allPlayers, sum), by = c("gameid", "team"))
agg <- merge(agg, aggregate(ownExpPoints ~ gameid + team, allPlayers, max), by = c("gameid", "team"))
agg <- merge(agg, aggregate(oppExpPoints ~ gameid + team, allPlayers, max), by = c("gameid", "team"))
colnames(agg) <- c("gameid", "team", "totalTeamPmin", "totalTeamPredPoints", "totalFdTeamPoints", "ownExpPoints", "oppExpPoints")
agg <- subset(agg, abs(agg$totalTeamPmin - 240) < 5)
agg$resid <- agg$totalTeamPoints - agg$totalFdTeamPoints
agg$resid <- agg$totalTeamPoints - agg$totalTeamPredPoints
agg$resid <- agg$totalTeamPredPoints - agg$totalFdTeamPoints
binnedplot(agg$totalTeamPmin, agg$resid)
binnedplot(agg$ownExpPoints, agg$resid)
binnedplot(agg$oppExpPoints, agg$resid)
binnedplot(agg$ownExpPoints, agg$resid)
binnedplot(agg$totalTeamPmin, agg$resid)
binnedplot(agg$ownExpPoints, agg$resid)
binnedplot(agg$oppExpPoints, agg$resid)
binnedplot(agg$ownExpPoints - agg$oppExpPoints, agg$resid)
mean(agg$resid)
